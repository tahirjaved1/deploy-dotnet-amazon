name: Build, Push and Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 'Terraform_Init'
        id: tfinit
        if: github.ref == 'refs/heads/master'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.4.6
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: "./Terraform"

      - name: 'Terraform_Plan'
        id: tfplan
        if: github.ref == 'refs/heads/master'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.4.6
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: "./Terraform"

      - name: 'Terraform_Apply'
        id: tfapply
        if: github.ref == 'refs/heads/master'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.4.6
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: "./Terraform"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          IMAGE_TAG=$GITHUB_SHA
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f BookManager/Dockerfile BookManager/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV


      - name: 'Setup SonarQube in EC2'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }} 
        run: |
          # Output the private key to a file and set the correct permissions
          terraform -chdir="./Terraform" output -raw private_key > key.pem
          chmod 600 key.pem

          sonarqube_public_ip_ssh=$(terraform -chdir="./Terraform" output -raw sonarqube_public_ip_ssh)

          # SSH into the EC2 instance and execute commands
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$sonarqube_public_ip_ssh << EOF
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            export AWS_REGION=$AWS_REGION
            # Update and install required packages
            # Install Docker
            sudo apt update
            sudo apt install docker.io -y

            # Start and enable Docker service
            sudo systemctl start docker
            sudo systemctl enable docker

            # Add the current user to the docker group to run Docker commands without sudo
            sudo usermod -aG docker $USER
            sudo chown $USER:docker /var/run/docker.sock

            # Install Docker Compose
            sudo apt install docker-compose -y

            # Save the Docker Compose content to a file
            echo "version: '3'

            services:
              sonarqube:
                image: sonarqube:latest
                ports:
                  - \"9000:9000\"
                networks:
                  - sonar-network
                environment:
                  - SONARQUBE_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonarqube
                  - SONARQUBE_JDBC_USERNAME=sonaruser
                  - SONARQUBE_JDBC_PASSWORD=yourpassword
                depends_on:
                  - sonarqube-db

              sonarqube-db:
                image: postgres:latest
                networks:
                  - sonar-network
                environment:
                  - POSTGRES_USER=sonaruser
                  - POSTGRES_PASSWORD=yourpassword

            networks:
              sonar-network:
                driver: bridge" > docker-compose.yml

            # Run Docker Compose
            sudo docker-compose up -d

            # Open port 9000 in the firewall
            sudo ufw allow 9000/tcp

            # Display Docker version and running containers
            sudo docker version
            sudo docker ps -a
          EOF
          sonarqube_public_ip=$(terraform -chdir="./Terraform" output -raw sonarqube_public_ip)
          echo $sonarqube_public_ip
        shell: /usr/bin/bash -e {0}

      - name: 'Setup Nexus Artifactory in EC2 Instance'
        run: |
          terraform -chdir="./Terraform" output -raw private_key > key.pem
          chmod 600 key.pem

          nexus_public_ip_ssh=$(terraform -chdir="./Terraform" output -raw nexus_public_ip_ssh)

          # SSH into the EC2 instance and execute commands
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$nexus_public_ip_ssh << EOF 
            # Update and install required packages
            sudo apt-get update -y
            sudo apt-get install -y docker.io awscli
          EOF
          nexus_public_ip=$(terraform -chdir="./Terraform" output -raw nexus_public_ip)
          echo $nexus_public_ip
        shell: /usr/bin/bash -e {0}        

      - name: 'Deployment Dotnet Code EC2 Instance'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}      
        run: |
          # Set environment variables
          printf "sonarqube_public_ip=%s\n" $(terraform -chdir="./Terraform" output -raw sonarqube_public_ip) >> $GITHUB_ENV
          printf "nexus_public_ip=%s\n" $(terraform -chdir="./Terraform" output -raw nexus_public_ip) >> $GITHUB_ENV

          # Output the private key to a file and set the correct permissions
          terraform -chdir="./Terraform" output -raw private_key > key.pem
          chmod 600 key.pem

          EC2_IP=$(terraform -chdir="./Terraform" output -raw deployment_instance_public_ip) 
          AWS_REGION=${{ env.AWS_REGION }}
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=$GITHUB_SHA
          IMAGE="$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"

          # SSH into the EC2 instance and execute commands
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$EC2_IP << EOF
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            export AWS_REGION=$AWS_REGION          
            # Update and install required packages
            sudo apt-get update -y
            sudo apt-get install -y docker.io awscli

            # Start and enable Docker
            sudo systemctl start docker
            sudo systemctl enable docker

            # Add the current user to Docker group
            sudo usermod -aG docker \$USER

            # Log into Docker registry non-interactively
            aws_ecr_login=\$(aws ecr get-login-password --region $AWS_REGION)
            echo \$aws_ecr_login | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

            # Pull the Docker image
            sudo docker pull $IMAGE

            # Run Docker container
            sudo docker run -d --name myapp -p 80:80 $IMAGE
          EOF
          deployment_instance_public_ip=$(terraform -chdir="./Terraform" output -raw deployment_instance_public_ip)
          echo $deployment_instance_public_ip
        shell: /usr/bin/bash -e {0}