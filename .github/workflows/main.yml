name: Build, Push and Deploy

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          role-to-assume: arn:aws:iam::070982173331:role/Github
          role-session-name: Github
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      # - name: Build, tag, and push Django image to Amazon ECR
      #   id: django-build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     # Build a docker container and
      #     # push it to ECR so that it can
      #     # be deployed to ECS.
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f snowball/django.Dockerfile snowball/
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     echo "django_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
  #     - name: Deploy to EC2
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: Deployment  # Replace with your EC2 instance's username, e.g., ubuntu
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         script: |
  #           # Ensure Docker is installed
  #           sudo apt-get update -y
  #           sudo apt-get install -y docker.io
  #           sudo systemctl start docker
  #           sudo systemctl enable docker
  #           sudo usermod -aG docker $USER

  #           # Logout and login to apply usermod changes - not needed in script
  #           # Pull and run the Docker image
  #           docker pull ${{ env.IMAGE_URI }}
  #           docker stop myapp || true
  #           docker rm myapp || true
  #           docker run -d --name myapp -p 80:80 ${{ env.IMAGE_URI }}
