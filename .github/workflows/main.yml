name: Build, Push and Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1  # Change to your desired AWS region
  ECR_REPOSITORY: deployapplication  # Replace with your ECR repository name
  # AWS_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.9

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}          

      - name: Terraform Init
        run: terraform init ./Terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan ./Terraform

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve ./Terraform 

      # - name: Set Terraform Outputs to Env Vars
      #   id: set-env
      #   run: |
      #     EC2_IP=$(terraform output -raw deployment_instance_public_ip | tr -d '\n')
      #     PRIVATE_KEY=$(terraform output -raw private_key | tr -d '\n')
      #     echo "EC2_IP=${EC2_IP}" >> $GITHUB_ENV
      #     echo "PRIVATE_KEY<<EOF" >> $GITHUB_ENV
      #     echo "${PRIVATE_KEY}" >> $GITHUB_ENV
      #     echo "EOF" >> $GITHUB_ENV
      #     # echo "PRIVATE_KEY=${PRIVATE_KEY}" >> $GITHUB_ENV

      - name: Set Terraform Outputs to Env Vars
        run: |
          echo "EC2_IP=$(terraform output -raw deployment_instance_public_ip)" >> $GITHUB_ENV
          echo "PRIVATE_KEY=$(terraform output -raw private_key)" >> $GITHUB_ENV
              

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          IMAGE_TAG=$GITHUB_SHA
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f BookManager/Dockerfile BookManager/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      # - name: Terraform Destroy
      #   if: failure()
      #   run: terraform destroy -auto-approve ./Terraform

      - name: Set permissions for private key
        run: |
          echo "$PRIVATE_KEY" > key.pem
          chmod 600 key.pem
        env:
          PRIVATE_KEY: ${{ steps.set-env.outputs.PRIVATE_KEY }}

      - name: Deploy to EC2
        run: |
          KEY_CONTENT=$(cat key.pem)
          echo "SSH_KEY=${KEY_CONTENT}" >> $GITHUB_ENV

      - name: SSH and Execute Commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_IP }}
          username: ubuntu
          key: ${{ env.SSH_KEY }}
          script: |
            # ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@ec2-18-206-169-89.compute-1.amazonaws.com
            # Login to Amazon ECR to enable pulling Docker images
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
      
            # Ensure Docker is installed and running on the EC2 instance
            sudo apt-get update -y
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
      
            # Pull the latest Docker image and run it
            docker pull ${{ env.image }}  # Pull the Docker image specified in the build-and-push job
            docker stop myapp || true  # Stop the existing container if it's running
            docker rm myapp || true  # Remove the container to allow a fresh start
            docker run -d --name myapp -p 80:80 ${{ env.image }}  # Run the new container        

      # - name: Set permissions for private key
      #   run: |
      #     echo "${{ env.AWS_PRIVATE_KEY }}" > key.pem
      #     chmod 600 key.pem
      # - name: Pull Docker image
      #   run: |
      #     ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@13.51.196.220 'sudo docker pull 070982173331.dkr.ecr.us-east-1.amazonaws.com/applicationdeploy:e40084f989cb8085bf0b35b110c3064c33a653e6'
      # - name: Stop running container
      #   run: |
      #     ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@100.24.8.251 'sudo docker stop cddemo || true'
      #     ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@100.24.8.251 'sudo docker rm cddemo || true'
      # - name: Run new container
      #   run: |
      #     ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@your-ec2-instance-ip 'sudo docker run -d --name cddemo -p 80:3000 your-dockerhub-username/cddemo:latest'      

      - name: Terraform Destroy
        if: always()
        run: terraform destroy -auto-approve ./Terraform