name: Build, Push and Deploy

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and Push Docker image to ECR
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          IMAGE_URI=${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
  #     - name: Deploy to EC2
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: Deployment  # Replace with your EC2 instance's username, e.g., ubuntu
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         script: |
  #           # Ensure Docker is installed
  #           sudo apt-get update -y
  #           sudo apt-get install -y docker.io
  #           sudo systemctl start docker
  #           sudo systemctl enable docker
  #           sudo usermod -aG docker $USER

  #           # Logout and login to apply usermod changes - not needed in script
  #           # Pull and run the Docker image
  #           docker pull ${{ env.IMAGE_URI }}
  #           docker stop myapp || true
  #           docker rm myapp || true
  #           docker run -d --name myapp -p 80:80 ${{ env.IMAGE_URI }}
