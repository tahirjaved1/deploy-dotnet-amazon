name: Build, Push and Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AWS_REGION: us-east-1  # Change to your desired AWS region
  ECR_REPOSITORY: applicationdeploy  # Replace with your ECR repository name

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.9

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}          

      - name: Terraform Init
        run: terraform init ./Terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan ./Terraform

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve ./Terraform 

      - name: Set Terraform Outputs to Env Vars
        id: set-env
        run: |
          EC2_NAME=$(terraform output -raw deployment_instance_public_ip) >> $GITHUB_ENV
          PRIVATE_KEY=$(terraform output -raw private_key) >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          IMAGE_TAG=$GITHUB_SHA
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f BookManager/Dockerfile BookManager/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      # - name: Terraform Destroy
      #   if: failure()
      #   run: terraform destroy -auto-approve ./Terraform

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_NAME }}
          username: ubuntu
          key: ${{ env.PRIVATE_KEY }}
          script: |
            # Login to Amazon ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # Ensure Docker is installed
            sudo apt-get update -y
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER

            # Pull and run the Docker image
            docker pull ${{ env.image }}  # Use the same variable name as set in the build-and-push job
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 80:80 ${{ env.image }}

      - name: Terraform Destroy
        if: always()
        run: terraform destroy -auto-approve ./Terraform

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
  #     - name: Deploy to EC2
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.EC2_HOST }} # or get this from Terraform output similarly
  #         username: ubuntu
  #         key: ${{ env.PRIVATE_KEY }}
  #         script: |
  #           # Login to Amazon ECR
  #           aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

  #           # Ensure Docker is installed
  #           sudo apt-get update -y
  #           sudo apt-get install -y docker.io
  #           sudo systemctl start docker
  #           sudo systemctl enable docker
  #           sudo usermod -aG docker $USER

  #           # Pull and run the Docker image
  #           docker pull ${{ env.image }}  # Use the same variable name as set in the build-and-push job
  #           docker stop myapp || true
  #           docker rm myapp || true
  #           docker run -d --name myapp -p 80:80 ${{ env.image }}

  # cleanup:
  #   runs-on: ubuntu-latest
  #   if: ${{ always() && needs.build-and-push.result == 'failure' || needs.deploy.result == 'failure' }}
  #   needs: [build-and-push, deploy]
  #   steps:

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
      
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1
  #       with:
  #         terraform_version: 0.14.9

  #     - name: Terraform Init
  #       run: terraform init ./Terraform

  #     - name: Terraform Destroy
  #       run: terraform destroy -auto-approve ./Terraform